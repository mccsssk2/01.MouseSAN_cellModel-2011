// Initiate spiral wave using phase distribution initial conditions in mouse Ventricle. This may take iterative experimenting.

def real ht 1.0e-5; // this ht has to be the same in 1D and 2D
def real hx 0.1; // this hx has to be the same in the 1D and 2D if using phase distribution
def real D 0.0735; // this D has to be the same in 1D and 2D if using phase dbn
def real L 10.0;

def int nx L/hx;
def int ny nx;

def str V 0; def real Vmin -120; def real Vmax  80; def real Vmid -50;
def str h 1; def real hmin    0; def real hmax 1.0; def real hmid 0.5;
def str n 2; def real nmin    0; def real nmax 1.0; def real nmid 0.5;
def str oi 14; def real oimin 0.0; def real oimax 1.0; def real oimid 0.5;
def str f 5; def real fmin  0.0; def real fmax 1.0; def real fmid 0.5;

def int neqn 45;
def str i 45; def real imin  0.0; def real imax 20.0; def real imid 0.5*imax;

// The computational grid
state xmax=nx+2 ymax=ny+2 zmax=1 vmax=[i]+1;

// Schedule and display parameters
def long dt 10;         // screen output period
def long DT 20;	// files output period, every so many time steps. rate is 1 frame per ms to produce many frames (around 10000).
def real T;		// model time, time units

def real begin;
def real often;
def real seldom;
def real end;

k_func nowhere=1 pgm={
  T     =t*ht;
  begin =eq(t,0);
  often =eq(mod(t,dt),0);
  seldom=eq(mod(t,DT),0);
  end   =ge(T,10.0); // short run to start with: we just need to see the first 3 or 4 picutures firt
};

// Initial conditions
def real x0 0.5*nx+0.5; def real y0 0.5*ny+0.5; def real lam 1000.0/hx;
k_func when=begin
  name=initial file=mousevent1.rec t0=0 t1=0 x0=1 x1=nx y0=1 y1=ny pgm={
  phaseu=atan2(x-x0,y-y0)-2*pi*hypot(x-x0,y-y0)/lam;
};

// The computations
diff v0=[V] v1=[i] hx=hx D=D;
euler name=ode1 v0=0 v1=neqn-1 ht=ht ode=crn rest=10000 par={
ht=ht;
IV=@[i];
};

// Image files
ppmout when=seldom file=ppm/[0]_%d.ppm mode="w"
   r=[V]  r0=Vmin  r1=Vmax 
   g=[oi] g0=oimin g1=oimax
   b=[f]  b0=fmin  b1=fmax;
;

// Output
singz when=often v0=[V] c0=Vmid v1=[oi] c1=oimid hx=hx file=spiral_tips.dat;
def real voltage;
sample when=always x0=xmax/2+10 y0=ymax/2+10 z0=0 v0=0 result=voltage;
def real cai_transient;
sample when=always x0=xmax/2+10 y0=ymax/2+10 z0=0 v0=8 result=cai_transient;
k_print nowhere=1 when=often file=[0].samples append=0 valuesep="\t" list={T;voltage;cai_transient;};

stop when=end;

end;
